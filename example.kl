
#import test
import io "koala/io";
import sys "koala/sys";
import "koala/lang";
import "util";

# function type test
var a func(int, int) int;
var b func(int, int) int = func(a int, b int) int {
  return a + b;
};

# anonymous function test
func(a int, b int) int {
  return a + b;
};

# function test
func string_to_int(str string) int {
  return str.ToString();
}

# struct define test
struct Person {
  name string = "zhuguangxiang";
  age  int = 30;
  func __init__(name string, age int) {
    self.name = name;
    self.age  = age;
  }

  func hash() int {
    return age.hash();
  }

  func compare(p Person) bool {
    return 1, 2 + 3, false;
  }
}

# interface define test
interface Hello {
  func SayHello(string, int) string;
  func SayBye(string);
}

# typedef test
typedef myHello Hello;

# array test
var a []int = []int{12,3};
var b = [2]int;
var a1, a2, a3 = []int{"123", "456"}, "jack", int(65535);
const konst = "hello,world";

# {12,3}.length();    //error
# var d = {1,2}[3];   // error
# var a1 = [3]int{1}; // error
var e = []int{1,2,{3,4}, {1,2, {3,4,{5}}}};
[]int{2,3}.Print();
[]Any{2, "zhuguangxiang", int(320023), tuple(), dict()};
# []int{}; //error
[3][2]int;
[3][2][]int;
[][]int{{1,2,3}, {4,5,6}, {7,8}, {100}, 200, {300, {22}}};

# atom test
true;false;id;100200;12.345;"hi,boy";self;null;

# trailer test
io.File;
12.ToString();
"abc".UpperCase();
sys.Path();
io.Print("hello,world\n");
io.Print(int(32).ToString());

# expression test
2+3;2-3;2*3;3/2;4%2;
+3;-3;!3;~3;~444;
2 && 3; 2 || 3;
2 & 3; 2 | 3; 2 ^ 3;
2 << 3; 2 >> 3;
2 > 3; 2 < 3; 2 >= 3; 2 <= 3;
2 != 3; 2 == 3;

# assignment test
a,b = 1,2;
a1 += 1+3;
a2 -= 2;
a3 *= 3;
a4 /= 4;
a5 %= 5;
a6 &= 6;
a7 |= 7;
a8 ^= 8;
a9 >>= 9;
a10 <<= 10;

# if statement test
if (2 > 3 && 4 < 5) {
  io.Print("2 > 3");
} else if (a <= b) {

} else {
  Print("bye");
}

# while statement test
while (2 > 3) {
  io.Print("while test");
}

do {
  io.Print("do-while test");
} while (a <= b);

while (a > 3) {
  if (a == 10) {
    break;
  }
  a += 1;
}
/*
1. Uses "koala/io" to replace "io"
2. Symbols:
  koala/io
  Print
  "hello,world\n"
3. Instructions:
  GET_MODULE 0
  LOADK 2
  CALL  1
  RET
*/
