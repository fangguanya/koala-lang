
#import test
import io "koala/io"
import sys "koala/sys"
import "koala/lang"
import "util"

# array test
var a []int = []int{12,3};
var b = [2]int;
var a1, a2, a3 = []int{"123", "456"}, "jack", int(65535);
const konst = "hello,world";

# {12,3}.length();    //error
# var d = {1,2}[3];   // error
# var a1 = [3]int{1}; // error
var e = []int{1,2,{3,4}, {1,2, {3,4,{5}}}};
[]int{2,3}.Print();
[]Any{2, "zhuguangxiang", int(320023), tuple(), dict()};
# []int{}; //error
[3][2]int;
[3][2][]int;
[][]int{{1,2,3}, {4,5,6}, {7,8}, {100}, 200, {300, {22}}};

# atom test
true;false;id;100200;12.345;"hi,boy";self;null;

# trailer test
io.File;
12.ToString();
"abc".UpperCase();
sys.Path();
io.Print("hello,world\n");

# array[10];
# array["hello"];
# add(2,3).ToString();
# Hello("koala world")(123);

#io.Print(int(32).ToString());
#32.ToString();

# {1,2,3}.length();

# //Not allowed in koala syntax
# 32[10];   //subscript access
# 32 () {}  //interface implementation with anonymous name
# 32 (123)  //call

/*
1. Uses "koala/io" to replace "io"
2. Symbols:
  koala/io
  Print
  "hello,world\n"
3. Instructions:
  GET_MODULE 0
  LOADK 2
  CALL  1
  RET
*/
